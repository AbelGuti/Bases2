{
  "name": "toner",
  "version": "0.1.5",
  "description": "Dynamic documents assembling and printing into various formats",
  "keywords": [
    "jsreport",
    "pdf",
    "xlsx"
  ],
  "main": "index.js",
  "scripts": {
    "test": "mocha test"
  },
  "author": {
    "name": "Jan Blaha",
    "email": "jan.blaha@hotmail.com"
  },
  "homepage": "https://github.com/jsreport/toner",
  "repository": {
    "type": "git",
    "url": "git@github.com:jsreport/toner.git"
  },
  "license": "MIT",
  "dependencies": {
    "mkdirp": "0.5.1",
    "script-manager": "0.4.3",
    "streamifier": "0.1.1"
  },
  "devDependencies": {
    "mocha": "2.2.5",
    "should": "6.0.3"
  },
  "readme": "#jsreport toner\r\n[![Build Status](https://travis-ci.org/jsreport/toner.png?branch=master)](https://travis-ci.org/jsreport/toner)\r\n\r\n**[node](https://nodejs.org/) library for dynamic assembling documents and printing them into various formats** \r\n(written for [jsreport](http://jsreport.net))\r\n\r\n\r\n```js\r\nvar toner = require(\"toner\")();\r\ntoner.engine(\"jsrender\", require(\"toner-jsrender\"));\r\ntoner.recipe(\"wkhtmltopdf\", require(\"toner-wkhtmltopdf\")());\r\n\r\ntoner.render({\r\n    template: { \r\n\t    engine: \"jsrender\",\r\n\t\trecipe: \"wkhtmltopdf\", \r\n\t\tcontent: \"<h1>{{:foo}}</h1>\"\r\n\t},\r\n    data: { foo: \"hello world\"}\r\n}, function(err, res) {\r\n    var pdfbuffer = res.content;\r\n    var pdfstream = res.stream;    \r\n});\r\n```\r\n\r\n##Basics\r\n\r\n###Engines\r\nDocuments are assembled using javascript templating engines. The **engine** needs to be first registered in toner.\r\n\r\n```js\r\ntoner.engine(\"[engine name]\", pathToEngineScript);\r\n```\r\n\r\nYou can write your own engine or use an existing one:\r\n\r\n- [toner-handlebars](https://github.com/jsreport/toner-handlebars)\r\n- [toner-jsrender](https://github.com/jsreport/toner-jsrender)\r\n\r\nNote that templating engine runs safely in another sand-boxed process. You don't have to be afraid to run user defined templates. See [script-manager](https://github.com/pofider/node-script-manager) for details.\r\n\r\nYou can register and use `none` engine to skip its processing:\r\n\r\n```js\r\ntoner.engine('none', toner.noneEngine);\r\ntoner.render({\r\n  template: {\r\n    engine: 'none'   \r\n    ...\r\n  }\r\n```\r\n\r\n###Recipes\r\nThe actual printing of the document into pdf, excel or any other type of the document is done by something we call **recipe**. The recipe also needs to be registered first.\r\n\r\n```js\r\ntoner.recipe(\"[recipe name]\", function(req, res) { ... });\r\n```\r\n\r\nYou can also write your own recipe or use an existing one:\r\n\r\n- [toner-phantom](https://github.com/jsreport/toner-phantom)\r\n- [toner-html-to-xlsx](https://github.com/jsreport/toner-html-to-xlsx)\r\n- [toner-wkhtmltopdf](https://github.com/jsreport/toner-wkhtmltopdf)\r\n\r\nYou can use `html` recipe to simply produce html:\r\n\r\n```js\r\ntoner.recipe(\"html\", toner.htmlRecipe);\r\ntoner.render({\r\n  template: {\r\n    recipe: 'html'   \r\n    ...\r\n  }\r\n```\r\n\r\n###Render\r\nThe complete document generation is invoked using `toner.render` function:\r\n```js\r\ntoner.render({\r\n    template: { \r\n\t    engine: \"jsrender\",\r\n\t\trecipe: \"wkhtmltopdf\", \r\n\t\tcontent: \"<h1>{{:foo}}</h1>\"\r\n\t},\r\n    data: { foo: \"hello world\"}\r\n}, function(err, res) {\r\n    var pdfbuffer = res.content;\r\n    var pdfstream = res.stream;    \r\n});\r\n```\r\nThe only parameter is an object representing rendering request. The request has following structure:\r\n```js\r\n{\r\n\t//[required]\r\n    template: { \r\n\t    //[required] templating engine used to assemble document\r\n\t    engine: \"jsrender\",\r\n\t    //[required] recipe used for printing previously assembled document\r\n\t\trecipe: \"wkhtmltopdf\", \r\n\t\t//[required] template for the engine\t\t\r\n\t\tcontent: \"<h1>{{:foo}}</h1>\",\r\n\t\t//javascript helper functions used by templating engines\r\n\t\thelpers: \"function foo() { ...}\" + \r\n\t\t\t\t \"function foo2() { ... }\"\r\n\t\t//any other settings used by recipes\t\t \r\n\t\t...\t\t \r\n\t},\r\n\t//dynamic data inputs used by templating engines\r\n    data: { foo: \"hello world\"}\r\n    ...\r\n}\r\n```\r\n\r\nThe render callback then contains the response with\r\n```js\r\n{\r\n\t//node.js buffer with the document\r\n\tcontent: ...\r\n\t//stream with the document\r\n\tstream: ...\r\n\t//http response headers with valid content type..\r\n\theaders: { ... }\r\n}\r\n```\r\n\r\n##Pipe the document to the http response\r\n```js\r\nvar http = require('http');\r\nhttp.createServer(function (req, res) {\r\n    toner.render({...}, function(err, out) {\r\n        out.stream.pipe(res);\r\n    });\r\n}).listen(1337, '127.0.0.1');\r\n```\r\n\r\n##Hooks\r\nIt is expected there will soon popup other packages hooking into the Toner and adding additional functionality. For this case Toner provides several hooks which can be used to extend it.\r\n\r\n```js\r\ntoner.before(function(req, res, cb) { ... });\r\ntoner.after(function(req, res, cb) { ... });\r\ntoner.afterEngine(function(req, res, cb) { ... });\r\n``` \r\n\r\n##Options\r\nCalling Toner accepts some options as the parameter\r\n```js\r\nvar toner = require(\"toner\")({ ... });\r\n```\r\n\r\nPossible options:\r\n- `tempDirectory` - this attribute is used by the recipes to store temporary files\r\n- options passed to the [script-manager](https://github.com/pofider/node-script-manager) depndency\r\n\r\n\r\n##Tests\r\n\r\n```bash\r\nnpm install\r\nnpm test\r\n```\r\n\r\n##Contributions\r\nYes, please.\r\n\r\n##License\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jsreport/toner/issues"
  },
  "_id": "toner@0.1.5",
  "dist": {
    "shasum": "81c237190e52e72c6262d42cdfa773c7d536f757"
  },
  "_from": "toner@0.1.5",
  "_resolved": "https://registry.npmjs.org/toner/-/toner-0.1.5.tgz"
}
